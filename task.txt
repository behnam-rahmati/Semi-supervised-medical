from mani_skill.utils import sapien_utils
from mani_skill.utils.structs import Pose

def load_laptop(scene):
    """Creates a laptop model in ManiSkill similar to the MuJoCo XML definition."""

    # Laptop Base
    builder_base = scene.create_actor_builder()
    builder_base.add_box_collision(half_size=[0.2, 0.1, 0.01])
    builder_base.add_box_visual(half_size=[0.2, 0.1, 0.01], 
                                material=sapien.render.RenderMaterial(base_color=[0.75, 0.75, 0.75, 1]))
    builder_base.initial_pose = Pose(p=[0, 0.69, 0.01])  # Match MuJoCo positioning
    laptop_base = builder_base.build("laptopBase")

    # Laptop Cover (Hinged)
    builder_cover = scene.create_actor_builder()
    builder_cover.add_box_collision(half_size=[0.2, 0.01, 0.1])
    builder_cover.add_box_visual(half_size=[0.2, 0.01, 0.1], 
                                 material=sapien.render.RenderMaterial(base_color=[0.75, 0.75, 0.75, 1]))
    
    # Hinge Joint - Defines the laptop lid movement
    hinge_joint = scene.create_articulation_builder()
    hinge_joint.add_revolute_joint(
        parent=laptop_base,
        child=builder_cover,
        parent_pose=Pose(p=[0, -0.005, -0.1]),
        child_pose=Pose(),
        axis=[1, 0, 0],  # Rotates around the x-axis
        limits=[0, 1.5708],  # 0 to 90 degrees
        damping=0.1
    )

    laptop_cover = hinge_joint.build("laptopCover")
    
    return laptop_base, laptop_cover













def _load_scene(self, options: dict):
    with torch.device(self.device):
        self.table_scene = TableSceneBuilder(self)
        self.table_scene.build()

        # Load the laptop model
        self.laptop_base, self.laptop_cover = load_laptop(self.scene)

        # Add to simulation state tracking
        self.add_to_state_dict_registry(self.laptop_base)
        self.add_to_state_dict_registry(self.laptop_cover)
