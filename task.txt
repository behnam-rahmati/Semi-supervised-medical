from typing import Any, Dict, Union
import numpy as np
import sapien
import torch
from mani_skill.agents.robots.panda import PandaWristCam
from mani_skill.envs.sapien_env import BaseEnv
from mani_skill.envs.scene import ManiSkillScene
from mani_skill.envs.utils import randomization
from mani_skill.sensors.camera import CameraConfig
from mani_skill.utils import common, sapien_utils
from mani_skill.utils.registration import register_env
from mani_skill.utils.scene_builder.table import TableSceneBuilder
from mani_skill.utils.structs import Actor, Pose
from mani_skill.utils.structs.types import SimConfig

def _build_box_with_hole(
    scene: ManiSkillScene, inner_radius, outer_radius, depth, center=(0, 0)
):
    builder = scene.create_actor_builder()
    thickness = (outer_radius - inner_radius) * 0.5
    half_center = [x * 0.5 for x in center]
    half_sizes = [
        [depth, thickness - half_center[0], outer_radius],
        [depth, thickness + half_center[0], outer_radius],
        [depth, outer_radius, thickness - half_center[1]],
        [depth, outer_radius, thickness + half_center[1]],
    ]
    offset = thickness + inner_radius
    poses = [
        sapien.Pose([0, offset + half_center[0], 0]),
        sapien.Pose([0, -offset + half_center[0], 0]),
        sapien.Pose([0, 0, offset + half_center[1]]),
        sapien.Pose([0, 0, -offset + half_center[1]]),
    ]
    mat = sapien.render.RenderMaterial(
        base_color=sapien_utils.hex2rgba("#FFD289"), roughness=0.5, specular=0.5
    )
    for half_size, pose in zip(half_sizes, poses):
        builder.add_box_collision(pose, half_size)
        builder.add_box_visual(pose, half_size, material=mat)
    return builder

@register_env("PegInsertionSide-v1", max_episode_steps=100)
class PegInsertionSideEnv(BaseEnv):
    _sample_video_link = "https://github.com/haosulab/ManiSkill/raw/main/figures/environment_demos/PegInsertionSide-v1_rt.mp4"
    SUPPORTED_ROBOTS = ["panda_wristcam"]
    agent: Union[PandaWristCam]
    _clearance = 0.003

    def __init__(self, *args, robot_uids="panda_wristcam", num_envs=1, reconfiguration_freq=None, **kwargs):
        if reconfiguration_freq is None:
            if num_envs == 1:
                reconfiguration_freq = 1
            else:
                reconfiguration_freq = 0
        super().__init__(*args, robot_uids=robot_uids, num_envs=num_envs, reconfiguration_freq=reconfiguration_freq, **kwargs)

    @property
    def _default_sim_config(self):
        return SimConfig()

    @property
    def _default_sensor_configs(self):
        pose = sapien_utils.look_at([0, -0.3, 0.2], [0, 0, 0.1])
        return [CameraConfig("base_camera", pose, 128, 128, np.pi / 2, 0.01, 100)]

    @property
    def _default_human_render_camera_configs(self):
        pose = sapien_utils.look_at([0.5, -0.5, 0.8], [0.05, -0.1, 0.4])
        return CameraConfig("render_camera", pose, 512, 512, 1, 0.01, 100)

    def _load_agent(self, options: dict):
        super()._load_agent(options, sapien.Pose(p=[-0.615, 0, 0]))

    def _load_scene(self, options: dict):
        with torch.device(self.device):
            self.table_scene = TableSceneBuilder(self)
            self.table_scene.build()

            lengths = self._batched_episode_rng.uniform(0.085, 0.125)
            radii = self._batched_episode_rng.uniform(0.015, 0.025)
            centers = 0.5 * (lengths - radii)[:, None] * self._batched_episode_rng.uniform(-1, 1, size=(2,))

            self.peg_half_sizes = common.to_tensor(np.vstack([lengths, radii, radii])).T
            peg_head_offsets = torch.zeros((self.num_envs, 3))
            peg_head_offsets[:, 0] = self.peg_half_sizes[:, 0]
            self.peg_head_offsets = Pose.create_from_pq(p=peg_head_offsets)

            box_hole_offsets = torch.zeros((self.num_envs, 3))
            box_hole_offsets[:, 1:] = common.to_tensor(centers)
            self.box_hole_offsets = Pose.create_from_pq(p=box_hole_offsets)
            self.box_hole_radii = common.to_tensor(radii + self._clearance)

            pegs = []
            boxes = []
            hammers = []  # List for storing hammer actors

            for i in range(self.num_envs):
                scene_idxs = [i]
                length = lengths[i]
                radius = radii[i]
                builder = self.scene.create_actor_builder()
                builder.add_box_collision(half_size=[length, radius, radius])
                mat = sapien.render.RenderMaterial(base_color=sapien_utils.hex2rgba("#EC7357"), roughness=0.5, specular=0.5)
                builder.add_box_visual(sapien.Pose([length / 2, 0, 0]), half_size=[length / 2, radius, radius], material=mat)
                mat = sapien.render.RenderMaterial(base_color=sapien_utils.hex2rgba("#EDF6F9"), roughness=0.5, specular=0.5)
                builder.add_box_visual(sapien.Pose([-length / 2, 0, 0]), half_size=[length / 2, radius, radius], material=mat)
                builder.initial_pose = sapien.Pose(p=[0, 0, 0.1])
                builder.set_scene_idxs(scene_idxs)
                peg = builder.build(f"peg_{i}")
                self.remove_from_state_dict_registry(peg)

                inner_radius, outer_radius, depth = (radius + self._clearance, length, length)
                builder = _build_box_with_hole(self.scene, inner_radius, outer_radius, depth, center=centers[i])
                builder.initial_pose = sapien.Pose(p=[0, 1, 0.1])
                builder.set_scene_idxs(scene_idxs)
                box = builder.build_kinematic(f"box_with_hole_{i}")
                self.remove_from_state_dict_registry(box)
                pegs.append(peg)
                boxes.append(box)

                # Load hammer
                hammer_builder = self.scene.create_actor_builder()
                hammer_builder.add_from_xml(self._load_hammer_xml())  # Load from XML file
                hammer_builder.set_scene_idxs(scene_idxs)
                hammer = hammer_builder.build(f"hammer_{i}")
                hammers.append(hammer)

            self.peg = Actor.merge(pegs, "peg")
            self.box = Actor.merge(boxes, "box_with_hole")
            self.hammer = Actor.merge(hammers, "hammer")  # Add hammer actor

            self.add_to_state_dict_registry(self.hammer)

    def _initialize_episode(self, env_idx: torch.Tensor, options: dict):
        with torch.device(self.device):
            b = len(env_idx)
            self.table_scene.initialize(env_idx)

            xy = randomization.uniform(low=torch.tensor([-0.1, -0.3]), high=torch.tensor([0.1, 0]), size=(b, 2))
            pos = torch.zeros((b, 3))
            pos[:, :2] = xy
            pos[:, 2] = self.peg_half_sizes[env_idx, 2]
            quat = randomization.random_quaternions(b, self.device, lock_x=True, lock_y=True, bounds=(np.pi / 2 - np.pi / 3, np.pi / 2 + np.pi / 3))
            self.peg.set_pose(Pose.create_from_pq(pos, quat))

            xy = randomization.uniform(low=torch.tensor([-0.05, 0.2]), high=torch.tensor([0.05, 0.4]), size=(b, 2))
            pos = torch.zeros((b, 3))
            pos[:, :2] = xy
            pos[:, 2] = self.peg_half_sizes[env_idx, 0]
            quat = randomization.random_quaternions(b, self.device, lock_x=True, lock_y=True, bounds=(np.pi / 2 - np.pi / 8, np.pi / 2 + np.pi / 8))
            self.box.set_pose(Pose.create_from_pq(pos, quat))

            hammer_pos = torch.zeros((b, 3))
            hammer_pos[:, 0] = self._batched_episode_rng.uniform(-0.1, 0.1, size=(b,))  # Random x placement
            hammer_pos[:, 1] = self._batched_episode_rng.uniform(0.5, 0.8, size=(b,))  # Random y placement
            hammer_pos[:, 2] = 0.02  # Hammer height
            self.hammer.set_pose(Pose.create_from_pq(hammer_pos, quat))

            qpos = np.array([0.0, np.pi / 8, 0, -np.pi * 5 / 8, 0, np.pi * 3 / 4, -np.pi / 4, 0.04, 0.04])
            qpos = self._episode_rng.normal(0, 0.02, (b, len(qpos))) + qpos
            qpos[:, -2:] = 0.04
            self.agent.robot.set_qpos(qpos)
            self.agent.robot.set_pose(sapien.Pose([-0.615, 0, 0]))
